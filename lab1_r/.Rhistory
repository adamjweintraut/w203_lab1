---
title: 'Lab 1: Hypothesis Testing'
author: "w203 Teaching Team"
output:
pdf_document:
toc: false
number_sections: true
urlcolor: blue
---
tinytex::install_tinytex()
install_tinytex()
tinytex::
tinytex:install_tinytex()
---
title: 'Lab 1: Hypothesis Testing'
author: "Adam Weintraut"
output:
pdf_document:
toc: false
number_sections: true
urlcolor: blue
---
``` {r}
tinyte:install_tinytex()
```
This is a team-based lab.  Your instructor will divide you into teams of three, or possibly four students. To maximize learning, we would like all students to engage with every lab component, discussing strategy with teammates, reviewing solutions, and iterating on text and code.
---
title: 'Lab 1: Hypothesis Testing'
author: "Adam Weintraut"
output:
pdf_document:
toc: false
number_sections: true
urlcolor: blue
---
``` {r}
tinyte:install_tinytex()
```
This is a team-based lab.  Your instructor will divide you into teams of three, or possibly four students. To maximize learning, we would like all students to engage with every lab component, discussing strategy with teammates, reviewing solutions, and iterating on text and code.
---
title: 'Lab 1: Hypothesis Testing'
author: "Adam Weintraut"
output:
pdf_document:
toc: false
number_sections: true
urlcolor: blue
---
``` {r}
```
This is a team-based lab.  Your instructor will divide you into teams of three, or possibly four students. To maximize learning, we would like all students to engage with every lab component, discussing strategy with teammates, reviewing solutions, and iterating on text and code.
``` {r}
- Since we don't want to measure for the mean, and we have ordinal data, we should use Wilcoxon Paired Test instead. This will measure for paired differences between the samples instead of paired means, which is a better way to compare customer's sentiment.
---
title: 'Lab 1: Hypothesis Testing'
author: "Adam Weintraut"
output:
pdf_document:
toc: false
number_sections: true
urlcolor: blue
---
This is a team-based lab.  Your instructor will divide you into teams of three, or possibly four students. To maximize learning, we would like all students to engage with every lab component, discussing strategy with teammates, reviewing solutions, and iterating on text and code.
read.csv('./datasets/happiness_WHR.csv')
happy <- read.csv('./datasets/happiness_WHR.csv')
happy
mean_log_gdp <- mean(happy$Log.GDP.per.capita)
mean_log_gdp
mean_log_gdp <- mean(!is.na(happy$Log.GDP.per.capita))
mean_log_gdp
summary(happy)
is.na(happy$Log.GDP.per.capita)
happy[is.na(happy$Log.GDP.per.capita)]
happy$Log.GDP.per.capita[is.na(happy$Country.name)]
mean_log_gdp
happy$Log.GDP.per.capita[is.na(happy$Country.name)]
summary(happy)
happy$Country.name[is.na(happy$Log.GDP.per.capita)]
summary(happy)
happy = happy$
mean_log_gdp <- mean(!is.na(happy$Log.GDP.per.capita))
mean_log_gdp
mean_log_gdp <- mean(happy$Log.GDP.per.capita[happy$Log.GDP.per.capita])
mean_log_gdp <- mean(happy$Log.GDP.per.capita[!isna(happy$Log.GDP.per.capita)])
happy$Log.GDP.per.capita[!isna(happy$Log.GDP.per.capita)]
happy$Log.GDP.per.capita[!is.na(happy$Log.GDP.per.capita)]
summary(happy)
summary(happy)
summary(happy)
happy <- read.csv('./datasets/happiness_WHR.csv')
summary(happy)
happy$Log.GDP.per.capita[!is.na(happy$Log.GDP.per.capita)]
mean_log_gdp <- mean()
non_null_gdp <- !is.na(happy$Log.GDP.per.capita)
mean_log_gdp <- mean(happy$Log.GDP.per.capita[non_null_gdp])
happy$high_gdp_f <- happy$Log.GDP.per.capita > mean_log_gdp
high_gdp_sample_size <- sum(!is.na(happy$Log.GDP.per.capita[happy$high_gdp_f==T]))
high_gdp_sample_size
low_gdp_sample_size <- sum(!is.na(happy$Log.GDP.per.capita[happy$high_gdp_f==F]))
low_gdp_sample_size
happy <- read.csv('./datasets/happiness_WHR.csv')
summary(happy)
non_null_gdp <- !is.na(happy$Log.GDP.per.capita)
mean_log_gdp <- mean(happy$Log.GDP.per.capita[non_null_gdp])
happy$high_gdp_f <- happy$Log.GDP.per.capita > mean_log_gdp
high_gdp_sample_size <- sum(!is.na(happy$Log.GDP.per.capita[happy$high_gdp_f==T]))
print(paste0("high gdp sample size: ", high_gdp_sample_size))
low_gdp_sample_size <- sum(!is.na(happy$Log.GDP.per.capita[happy$high_gdp_f==F]))
print(paste0("low gdp sample size: ", low_gdp_sample_size))
happy$high_gdp_fmean_log_gdp
afg_ss <- sum(!is.na(happy$Life.Ladder[happy$Country.name=='Afghanistan']))
happy$Life.Ladder
legs <- read.csv('./datasets/legislators-current.csv')
summary(legs)
install.packages("wooldridge")
library(wooldridge)
library(wooldridge)
install.packages("wooldridge")
install.packages("wooldridge")
library(wooldridge)
?wine
wine
install.packages("wooldridge")
library(wooldridge)
?wine
wine
install.packages("wooldridge")
library(wooldridge)
?wine
wine
install.packages("wooldridge")
summary(wine)
install.packages("wooldridge")
library(wooldridge)
?wine
wine
summary(wine)
religion = read_csv('./datasets/GSS_religion.csv')
religion = read.csv('./datasets/GSS_religion.csv')
summary(religion)
religion
summary(religion)
null_catholic = is.na(religion$cathtemp)
sum(is.na(religion$cathtemp))
sum(is.na(religion$prottemp))
data <- read.csv("./datasets/anes_timeseries_2020_csv_20220210.csv")
summary(data)
all_data <- read.csv("./datasets/anes_timeseries_2020_csv_20220210.csv")
all_data$party <- all_data$V201018
all_data <- read.csv("./datasets/anes_timeseries_2020_csv_20220210.csv")
all_data$party <- all_data$V201018
all_data$how_voted <- all_data$V201024
all_data$reg_deadline <- all_data$V202114a # did not meet the registration deadline
all_data$reg_nowhere <- all_data$V202114b # did not know where or how to register
all_data$reg_residency <-  all_data$V202114c # did not meet residency reqs
all_data$reg_form <- all_data$V202114d # registration form not filed correctly
all_data$reg_id <- all_data$V202114e # did not have required identification
all_data$reg_no_interest <- all_data$V202114f # had no interest in the election
all_data$reg_no_difference <- all_data$V202114g # my vote wouldn't make a difference
all_data$reg_disability <- all_data$V202114h # had a permanent disability or illness
all_data$reg_no_english <- all_data$V202114i # has difficulty with english
all_data$reg_not_eligible <- all_data$V202114j # not eligible to vote
all_data$reg_other <- all_data$V202114k # other
all_data$difficulty_scale <- all_data$V202119 # Likert Scale on Difficulty
data <- all_data[, c('party', 'difficulty_scale')]
summary(data)
hist(data$party)
# democrat = 1
dems <- data[data$party == 1]
data
# democrat = 1
dems <- data[data$party == 1,]
# republican
reps <- data[data$party == 2,]
sum(!is.na(dems$difficulty_scale))
dems_sample_size <- sum(!is.na(dems$difficulty_scale))
reps_sample_size <- sum(!is.na(reps$difficulty_scale))
dems_sample_size
reps_sample_size
dems$difficulty_scale
count(dems$difficulty_scale)
nrow(dems$difficulty_scale)
nrow(dems)
dems_sample_size <- sum(dems$difficulty_scale > 0)
dems_sample_size
# democrat = 1
dems <- data[((data$party == 1) & (dems$difficulty_scale > 0)),]
# democrat = 1
dems <- data[((data$party == 1) & (data$difficulty_scale > 0)),]
# republican
reps <- data[((data$party == 2) & (data$difficulty_scale > 0)),]
dems_sample_size <- sum(!is.na(reps$difficulty_scale))
print(paste("democrat sample size", dems_sample_size))
reps_sample_size <- sum(!is.na(reps$difficulty_scale))
print(paste("reps sample size", dems_sample_size))
dems_sample_size <- sum(!is.na(dems$difficulty_scale))
print(paste("democrat sample size", dems_sample_size))
reps_sample_size <- sum(!is.na(reps$difficulty_scale))
print(paste("reps sample size", dems_sample_size))
dems_sample_size
hist(dems$difficulty_scale)
hist(reps$difficulty_scale)
hist(dems$difficulty_scale)
hist(reps$difficulty_scale)
hist(dems$difficulty_scale)
# assumptions
# dem and reps equally likely to have diffulty in voting
# iid
# unpaired (can't be dem and rep, each person has one )
# ordinal (likert scale basically)
wilcox.test(dems$difficulty_scale, reps$difficulty_scale, alternative = "two.sided")
# assumptions
# dem and reps equally likely to have diffulty in voting
# iid
# unpaired (can't be dem and rep, each person has one )
# ordinal (likert scale basically)
wilcox.test(reps$difficulty_scale, dems$difficulty_scale, alternative = "two.sided")
# assumptions
# dem and reps equally likely to have diffulty in voting
# iid
# unpaired (can't be dem and rep, each person has one )
# ordinal (likert scale basically)
wilcox.test(reps$difficulty_scale, dems$difficulty_scale, alternative = "less")
# null hypothesis: reps had less difficulty than dems?
wilcox.test(dems$difficulty_scale, reps$difficulty_scale, alternative = "less")
# null hypothesis: reps and dems had the same difficulty in voting
# alternative: checking
wilcox.test(reps$difficulty_scale, dems$difficulty_scale, alternative = "two.sided")
# Ha = reps had more difficulty than the dems
wilcox.test(reps$difficulty_scale, dems$difficulty_scale, alternative = "greater")
# Ha = reps had less diffulty than the dems
wilcox.test(reps$difficulty_scale, dems$difficulty_scale, alternative = "less")
all_data <- read.csv("./datasets/anes_timeseries_2020_csv_20220210.csv")
all_data$how_voted <- all_data$V201024
all_data$reg_deadline <- all_data$V202114a # did not meet the registration deadline
all_data$reg_nowhere <- all_data$V202114b # did not know where or how to register
all_data$reg_residency <-  all_data$V202114c # did not meet residency reqs
all_data$reg_form <- all_data$V202114d # registration form not filed correctly
all_data$reg_id <- all_data$V202114e # did not have required identification
all_data$reg_no_interest <- all_data$V202114f # had no interest in the election
all_data$reg_no_difference <- all_data$V202114g # my vote wouldn't make a difference
all_data$reg_disability <- all_data$V202114h # had a permanent disability or illness
all_data$reg_no_english <- all_data$V202114i # has difficulty with english
all_data$reg_not_eligible <- all_data$V202114j # not eligible to vote
all_data$reg_other <- all_data$V202114k # other
all_data$party <- all_data$V201018
all_data$leaning <- all_data$V201230
all_data$difficulty_scale <- all_data$V202119 # Likert Scale on Difficulty
data <- all_data[, c('party', 'difficulty_scale')]
data
# democrat = 1
dems <- data[((data$party == 1) & (data$difficulty_scale > 0)),]
# republican
reps <- data[((data$party == 2) & (data$difficulty_scale > 0)),]
dems_sample_size <- sum(!is.na(dems$difficulty_scale))
print(paste("democrat sample size", dems_sample_size))
reps_sample_size <- sum(!is.na(reps$difficulty_scale))
print(paste("reps sample size", reps_sample_size))
hist(dems$difficulty_scale)
hist(reps$difficulty_scale)
# assumptions
# dem and reps equally likely to have diffulty in voting
# iid
# unpaired (can't be dem and rep, each person has one )
# ordinal (likert scale basically)
# null hypothesis: reps and dems had the same difficulty in voting
# alternative: checking
wilcox.test(reps$difficulty_scale, dems$difficulty_scale, alternative = "two.sided") # their difficulty is not equal
# Ha = reps had more difficulty than the dems
wilcox.test(reps$difficulty_scale, dems$difficulty_scale, alternative = "greater")
# Ha = reps had less diffulty than the dems
wilcox.test(reps$difficulty_scale, dems$difficulty_scale, alternative = "less")
data <- all_data[, c('party', 'leaning', 'difficulty_scale')]
data
all_data <- read.csv("./datasets/anes_timeseries_2020_csv_20220210.csv")
# get most relevant
all_data$pre_reg_party <- all_data$V201018 # which party are they in
all_data$prepost_reg_party <- all_data$V202065x # pre-post registered party
all_data$post_reg_party   <- all_data$V202064 # post registered party
all_data$leaning_party <- all_data$V201230 # which way are they leaning
all_data$voting_difficulty <- all_data$V202119 # Likert Scale on Difficulty
summary(all_data$leaning)
data <- all_data[, c('pre_reg_party', 'prepost_reg_party', 'post_reg_party', 'leaning_party', 'difficulty_scale')]
all_data <- read.csv("./datasets/anes_timeseries_2020_csv_20220210.csv")
# get most relevant
all_data$pre_reg_party <- all_data$V201018 # which party are they in
all_data$prepost_reg_party <- all_data$V202065x # pre-post registered party
all_data$post_reg_party   <- all_data$V202064 # post registered party
all_data$leaning_party <- all_data$V201230 # which way are they leaning
all_data$voting_difficulty <- all_data$V202119 # Likert Scale on Difficulty
summary(all_data$leaning)
data <- all_data[, c('pre_reg_party', 'prepost_reg_party', 'post_reg_party', 'leaning_party', 'voting_difficulty')]
data
# democrat = 1
dems <- data[((data$party == 1) & (data$difficulty_scale > 0)),]
# republican
reps <- data[((data$party == 2) & (data$difficulty_scale > 0)),]
dems_sample_size <- sum(!is.na(dems$difficulty_scale))
print(paste("democrat sample size", dems_sample_size))
reps_sample_size <- sum(!is.na(reps$difficulty_scale))
print(paste("reps sample size", reps_sample_size))
hist(dems$difficulty_scale)
all_data <- read.csv("./datasets/anes_timeseries_2020_csv_20220210.csv")
# get most relevant
all_data$pre_reg_party <- all_data$V201018 # which party are they in
all_data$prepost_reg_party <- all_data$V202065x # pre-post registered party
all_data$post_reg_party   <- all_data$V202064 # post registered party
all_data$leaning_party <- all_data$V201230 # which way are they leaning
all_data$voting_difficulty <- all_data$V202119 # Likert Scale on Difficulty
data <- all_data[, c('pre_reg_party', 'prepost_reg_party', 'post_reg_party', 'leaning_party', 'voting_difficulty')]
data
# democrat = 1
dems <- data[((data$party == 1) & (data$voting_difficulty > 0)),]
# republican
reps <- data[((data$party == 2) & (data$voting_difficulty > 0)),]
dems_sample_size <- sum(!is.na(dems$voting_difficulty))
print(paste("democrat sample size", dems_sample_size))
reps_sample_size <- sum(!is.na(reps$voting_difficulty))
print(paste("reps sample size", reps_sample_size))
hist(dems$voting_difficulty)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
data <- all_data[, c('leaning_party', 'voting_difficulty')]
all_data <- read.csv("./datasets/anes_timeseries_2020_csv_20220210.csv")
# get most relevant
all_data$pre_reg_party <- all_data$V201018 # which party are they in
all_data$prepost_reg_party <- all_data$V202065x # pre-post registered party
all_data$post_reg_party   <- all_data$V202064 # post registered party
all_data$leaning_party <- all_data$V201230 # which way are they leaning
all_data$voting_difficulty <- all_data$V202119 # Likert Scale on Difficulty
data <- all_data[, c('pre_reg_party', 'leaning_party', 'voting_difficulty')]
data
# democrat = 1
dems <- data[((data$leaning_party == 1) & (data$voting_difficulty > 0)),]
# republican
reps <- data[((data$leaning_party == 3) & (data$voting_difficulty > 0)),]
dems_sample_size <- sum(!is.na(dems$voting_difficulty))
print(paste("democrat sample size", dems_sample_size))
reps_sample_size <- sum(!is.na(reps$voting_difficulty))
print(paste("reps sample size", reps_sample_size))
hist(dems$voting_difficulty)
hist(reps$voting_difficulty)
# assumptions
# dem and reps equally likely to have diffulty in voting
# iid
# unpaired (can't be dem and rep, each person has one )
# ordinal (likert scale basically)
# null hypothesis: reps and dems had the same difficulty in voting
# alternative: checking
wilcox.test(reps$difficulty_scale, dems$difficulty_scale, alternative = "two.sided") # their difficulty is not equal
data[((data$pre_reg_party == 1) & (data$prepost_reg_party == 2))]
summary(data[((data$pre_reg_party == 1) & (data$prepost_reg_party == 2))])
print(data[((data$pre_reg_party == 1) & (data$prepost_reg_party == 2))])
print(data[((data$pre_reg_party == 1) & (data$prepost_reg_party == 2))])
summary(data[((data$pre_reg_party == 1) & (data$prepost_reg_party == 2))])
print.data.frame(data[((data$pre_reg_party == 1) & (data$prepost_reg_party == 2))])
print.data.frame(data)
print.data.frame(data[((data$pre_reg_party == 1) & (data$prepost_reg_party == 2)),])
print.data.frame(data[(((data$pre_reg_party == 1) & (data$prepost_reg_party == 2)) | ((data$pre_reg_party == 2) & (data$prepost_reg_party == 1))),])
all_data <- read.csv("./datasets/anes_timeseries_2020_csv_20220210.csv")
# get most relevant
all_data$pre_reg_party <- all_data$V201018 # which party are they in
all_data$prepost_reg_party <- all_data$V202065x # pre-post registered party
all_data$post_reg_party   <- all_data$V202064 # post registered party
all_data$leaning_party <- all_data$V201230 # which way are they leaning
all_data$voting_difficulty <- all_data$V202119 # Likert Scale on Difficulty
data <- all_data[, c('pre_reg_party', 'leaning_party', 'voting_difficulty')]
data
print.data.frame(data)
# show conflicts
print.data.frame(data[(((data$pre_reg_party == 1) & (data$prepost_reg_party == 2)) | # pre vs. prepost
((data$pre_reg_party == 2) & (data$prepost_reg_party == 1)) |
((data$pre_reg_party == 1) & (data$post_reg_party == 2)) | # pre vs. post
((data$pre_reg_party == 2) & (data$post_reg_party == 1)) |
((data$post_reg_party == 1) & (data$prepost_reg_party == 2)) | # prepost vs. post
((data$post_reg_party == 2) & (data$prepost_reg_party == 1))),])
all_data <- read.csv("./datasets/anes_timeseries_2020_csv_20220210.csv")
# get most relevant
all_data$pre_reg_party <- all_data$V201018 # which party are they in
all_data$prepost_reg_party <- all_data$V202065x # pre-post registered party
all_data$post_reg_party   <- all_data$V202064 # post registered party
all_data$leaning_party <- all_data$V201230 # which way are they leaning
all_data$voting_difficulty <- all_data$V202119 # Likert Scale on Difficulty
data <- all_data[, c('pre_reg_party', 'leaning_party', 'voting_difficulty')]
data
